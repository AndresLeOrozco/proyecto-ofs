/*

Developers: 
Andres Leon Orozco
Eduardo Ojeda Paladino
Rony Chinchilla Azofeifa
Kairo Chacon Maleanos

*/
%%%%%%%%%%%%%%%%%%%%%% Generator %%%%%%%%%%%%%%%%%%%%%%%%%

option(splash, '*** Generated by OFS compiler *** \n import { Stream } from "../src/utils/stream.mjs"').

generator(prog([ImportList| StatementList])) :- 
	open('../private/prueba.mjs', write, Stream),
	option(splash, Header),
	generate_line_comment(Stream, Header),
	forall(member(Import, ImportList), generate_import(Stream, Import)),
	forall(member(Statment, StatementList), generate_statement_up(Stream, Statment)),
	close(Stream).

generator(error(T)) :- 
	open('../private/prueba.mjs', write, Stream),
	format(Stream, '*** Generated by OFS compiler ***~n', []),
	format(Stream, '~s', [T]),
	close(Stream).
	
generate_import(Stream, import(ident(I), from(str(K)))) :- 
    format(Stream, 'import ~s from ~s;~n', [I, K]).

generate_import(Stream, I) :-
    format(atom(Comment), 'Import not generated! ~q', [I]),
    generate_line_comment(Stream, Comment).

generate_statement_up(Stream, expr(L)) :- 
    generate_pipes(Stream, L).	

generate_statement_up(Stream, const(ident(I), undefined)) :- 
	format(Stream, 'const ~s = undefined ', [I]).

generate_statement_up(Stream, const(ident(I), LE)) :- 
	format(Stream, 'const ~s = ', [I]),
    generate_statement_up(Stream, LE),
	format(Stream, '~n',[]).
	
generate_statement_up(Stream, let(ident(I), undefined)) :- 
	format(Stream, 'let ~s = undefined;~n', [I]).

generate_statement_up(Stream, let(ident(I), LE)) :- 
	format(Stream, 'let ~s = ', [I]),
    generate_statement_up(Stream, LE),
	format(Stream, '~n',[]).

generate_statement_up(Stream, S) :-
	format(atom(Comment), 'Statment not generated! ~q', [S]),
	generate_line_comment(Stream, Comment).

generate_statement(Stream, es6(L)):-
	forall(member(X, L),generate_basic_expressions(Stream, X)).
	
generate_statement(Stream, cut(E)):-	
	format(Stream, 'cut(',[]),
	generate_statement(Stream,E),
	format(Stream, ')',[]).
	
generate_statement(Stream, filter(E)):-	
	format(Stream, 'filter(',[]),
	generate_statement(Stream,E),
	format(Stream, ')',[]).
	
generate_statement(Stream, map(E)):-	
	format(Stream, 'map(',[]),
	generate_statement(Stream,E),
	format(Stream, ')',[]).
	
generate_statement(Stream, iterate(E)):-	
	format(Stream, 'Stream.iterate(',[]),
	generate_list_with_commas(Stream,E),
	format(Stream, ')',[]).

	
generate_statement(Stream, L):-	
	forall(member(X, L),generate_statement(Stream, X)).

generate_statement(Stream, S) :-
	format(atom(Comment), 'Expression not generated! ~q', [S]),
	generate_line_comment(Stream, Comment).
	
generate_basic_expressions(Stream, num(N)):- !,	
	format(Stream, ' ~d', [N]).
	
generate_basic_expressions(Stream, str(S)):- !,
	format(Stream, '~s', [S]).
	
generate_basic_expressions(Stream, bool(B)):- !,	
	format(Stream, ' ~s', [B]).
	
generate_basic_expressions(Stream, aritOp(O)):- !,	
	format(Stream, ' ~s', [O]).
	
generate_basic_expressions(Stream, relOp(O)):- !,	
	format(Stream, ' ~s', [O]).

generate_basic_expressions(Stream, array(args(Ar), rest(_))):- !,
	format(Stream, '[', []),
	generate_list_with_commas(Stream, Ar),
	format(Stream, ']', []).

generate_basic_expressions(Stream, interrogant(E)):- !,	
	format(Stream, '!', []),
	generate_statement(Stream, E).
	
generate_basic_expressions(Stream, minus(E)):- !,	
	format(Stream, '-', []),
	generate_statement(Stream, E).
	
generate_basic_expressions(Stream, parenth(E)):- !,	
	format(Stream, '(', []),
	generate_statement(Stream, E),
	format(Stream, ')', []).

generate_basic_expressions(Stream, lambExpr(ID, E)):- !,	
	format(Stream, '~s => ', [ID]),
	generate_statement(Stream, E).

generate_basic_expressions(Stream, conditional([EI,ED|ER])):- !,	
	writeln(EI),
	generate_statement(Stream, EI),
	format(Stream, ' ? ', []),
	generate_statement(Stream, ED),
	format(Stream, ' : ', []),
	generate_statement(Stream, ER).
	
generate_basic_expressions(Stream, L):- !,
	forall(member(X, L), generate_simple_expressions(Stream, X)).

generate_basic_expressions(Stream, S) :-
	format(atom(Comment), 'Basic expression not generated! ~q', [S]),
	generate_line_comment(Stream, Comment).

generate_simple_expressions(Stream, [args([])]):- !,	
	format(Stream, '()', []).

generate_simple_expressions(Stream, [args(L)]):- !,
	format(Stream, '(', []),
	generate_list_with_commas(Stream, L),
	format(Stream, ')', []).

generate_simple_expressions(Stream, equals(E)):- !,
	format(Stream, ' = ', []),
	generate_statement(Stream, E).	
	
generate_simple_expressions(Stream, L ):-!,	
	generate_idents_with_dots(Stream, L).
	
generate_simple_expressions(Stream, squareParenth(I)):- !,	
	format(Stream, '[', []),
	generate_statement(Stream, I),
	format(Stream, ']', []).

generate_simple_expressions(Stream, S) :-
	format(atom(Comment), 'Simple expression not generated! ~q', [S]),
	generate_line_comment(Stream, Comment).

generate_list_with_commas(_, []).

generate_list_with_commas(Stream, [X]) :-
    generate_statement(Stream, X).
	
generate_list_with_commas(Stream, [X|Xs]) :-
    generate_statement(Stream, X),
    format(Stream, ', ', []),
    generate_list_with_commas(Stream, Xs).
	
generate_idents_with_dots(_, []).

generate_idents_with_dots(Stream, [ident(X)]) :-
    format(Stream, '~s', [X]).
	
generate_idents_with_dots(Stream, [ident(X)|Xs]) :-
    format(Stream, '~s', [X]),
    format(Stream, '.', []),
    generate_idents_with_dots(Stream, Xs).
	
generate_pipes(_, []).

generate_pipes(Stream, [X]) :-
    generate_statement(Stream, X),
	format(Stream,'~n',[]).
	
generate_pipes(Stream, [X|Xs]) :-
    generate_statement(Stream, X),
	format(Stream,'.',[]),
    generate_pipes(Stream, Xs).

generate_line_comment(Stream, Comment):-
	format(Stream, '// ~s~n', [Comment]).
	